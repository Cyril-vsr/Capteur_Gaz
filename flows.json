[
    {
        "id": "3d35441da62ff479",
        "type": "tab",
        "label": "Flux 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "627d0998281009b6",
        "type": "ui_chart",
        "z": "3d35441da62ff479",
        "name": "",
        "group": "7298f2f41155d3bc",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "Gas Level",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "600",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 960,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "44d227b2c9eeadc7",
        "type": "function",
        "z": "3d35441da62ff479",
        "name": "function 1",
        "func": "// Vérifier que msg.payload existe\nif (!msg.payload) {\n    node.warn(\"msg.payload est introuvable !\");\n    return null; // Arrête la fonction si msg.payload est absent\n}\n\nlet payload;\ntry {\n    // Vérifier si msg.payload est une chaîne JSON\n    if (typeof msg.payload === \"string\") {\n        payload = JSON.parse(msg.payload); // Convertir la chaîne JSON en objet\n    } else {\n        payload = msg.payload; // Utiliser l'objet tel quel\n    }\n\n    // Vérifier que le champ \"data\" existe dans le payload\n    if (!payload.data) {\n        node.warn(\"Donnée 'data' introuvable dans le message !\");\n        return null;\n    }\n\n    // Décoder la donnée Base64\n    let rawData = payload.data; // Récupère la donnée \"data\"\n    let buffer = Buffer.from(rawData, 'base64'); // Convertit la Base64 en buffer\n\n    // Extraire la valeur (par exemple, un entier)\n    let gasLevel = buffer.readUInt8(0); // Lit le premier octet comme un entier non signé\n\n    // Ajouter le niveau de gaz dans le message\n    msg.payload = gasLevel;\n\n    // Retourner le message modifié\n    return msg;\n} catch (err) {\n    node.error(\"Erreur lors du traitement des données : \" + err.message);\n    return null; // Arrête le traitement en cas d'erreur\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 240,
        "wires": [
            [
                "bac530fd53e226cd",
                "6df15d5f3ee58a26"
            ]
        ]
    },
    {
        "id": "596633077c589570",
        "type": "mqtt in",
        "z": "3d35441da62ff479",
        "name": "",
        "topic": "application/feb26b6b-94e0-45c9-ab1c-1f8aec7935bd/device/#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "863bcaa122c1dd25",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 220,
        "y": 240,
        "wires": [
            [
                "44d227b2c9eeadc7"
            ]
        ]
    },
    {
        "id": "bac530fd53e226cd",
        "type": "debug",
        "z": "3d35441da62ff479",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 360,
        "wires": []
    },
    {
        "id": "6df15d5f3ee58a26",
        "type": "function",
        "z": "3d35441da62ff479",
        "name": "function 2",
        "func": "// Vérifier que msg.payload existe et contient une valeur numérique pour gasLevel\nif (!msg.payload || isNaN(msg.payload)) {\n    node.warn(\"Le niveau de gaz (gasLevel) est introuvable ou invalide !\");\n    return null; // Arrête la fonction si gasLevel est absent ou invalide\n}\n\n// Détecter si le niveau de gaz dépasse 200\nif (msg.payload > 200) {\n    // Ajouter l'alerte \"Help\"\n    msg.payload = {\n        gasLevel: msg.payload,\n        alert: \"Help\"\n    };\n} else {\n    // Ajouter l'état \"Normal\"\n    msg.payload = {\n        gasLevel: msg.payload,\n        alert: \"Normal\"\n    };\n}\n\n// Retourner le message modifié\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 240,
        "wires": [
            [
                "627d0998281009b6",
                "7fe0349e048238a9"
            ]
        ]
    },
    {
        "id": "7fe0349e048238a9",
        "type": "ui_text",
        "z": "3d35441da62ff479",
        "group": "7298f2f41155d3bc",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Alert Status",
        "format": "{{msg.payload.alert}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 930,
        "y": 360,
        "wires": []
    },
    {
        "id": "7298f2f41155d3bc",
        "type": "ui_group",
        "name": "Default",
        "tab": "0169e2480007c90e",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "863bcaa122c1dd25",
        "type": "mqtt-broker",
        "name": "",
        "broker": "https://srv-chirpstack.insa-toulouse.fr",
        "port": "1883",
        "tls": "f0059905bdbbee91",
        "clientid": "",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "0169e2480007c90e",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "f0059905bdbbee91",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "CA_Cert.txt",
        "servername": "",
        "verifyservercert": true,
        "alpnprotocol": ""
    }
]